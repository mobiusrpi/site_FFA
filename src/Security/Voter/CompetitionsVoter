<?php

namespace App\Security\Voter;

use App\Entity\Competitions;
use Symfony\Component\Security\Core\Security;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Authorization\Voter\Voter;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;

class CompetitionsVoter extends Voter
{
    const ADD = 'COMPETITION_ADD';
    const EDIT = 'COMPETITION_EDIT';
     const DELETE = 'COMPETITION_DELETE';

    private $security;

    public function __construct( $security)
    {
        $this->security = $security;
    }

    protected function supports(string $attribute, $event): bool
    {
        if(!in_array($attribute, [self::ADD, self::EDIT, self::DELETE])){
            return false;
        }
        if(!$event instanceof Competitions){
            return false;
        }
        return true;

        // return in_array($attribute, [self::EDIT, self::DELETE]) && $event instanceof Events;
    }

    protected function voteOnAttribute($attribute, $event, TokenInterface $token): bool
    {
        // On récupère l'utilisateur à partir du token
        $user = $token->getUser();

        if(!$user instanceof UserInterface) return false;

        // On vérifie si l'utilisateur est admin
        if($this->security->isGranted('ROLE_ADMIN')) return true;

        // On vérifie les permissions
        switch($attribute){
            case self::ADD:
                // On vérifie si l'utilisateur peut ajouter
                return $this->canAdd();
                break;
            case self::EDIT:
                // On vérifie si l'utilisateur peut éditer
                return $this->canEdit();
                break;
            case self::DELETE:
                // On vérifie si l'utilisateur peut supprimer
                return $this->canDelete();
                break;
        }
    }

    private function canEdit(){
        return $this->security->isGranted('ROLE_ROUTEUR');
    }

    private function canAdd(){
        return $this->security->isGranted('ROLE_ADMIN');
    }  

    private function canDelete(){
        return $this->security->isGranted('ROLE_ADMIN');
    }
    
}